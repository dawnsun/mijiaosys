<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mijiaokj.sys.dal.repository.mapper.origin.MeteorologicalFactorsMapper">
    <!--  create table METEOROLOGICAL_FACTORS
(
   id                   bigint(20) unsigned not null auto_increment,
   land_id     bigint(20) unsigned not null comment '土地id',
   temperature     varchar(64)  not null comment '温度',
   illumination_time    varchar(64)  not null comment '光照时间',
   relative_humidity    varchar(64)  not null  comment '相对湿度',
   wind_speed      varchar(64)  not null comment '风速',
   photosynthetic_intensity     varchar(64)   comment '光合强度',
   respiration_intensity   varchar(64) comment '呼吸强度',
   precipitation     varchar(1024)  comment '降水量',
   gmt_create           datetime not null comment '创建时间',
   gmt_modified         datetime not null comment '修改时间',
   creator              varchar(32) not null comment '创建人',
   modifier             varchar(32) not null comment '修改人',
   is_delete            tinyint(1) not null  DEFAULT '0' comment '0-有效 1-删除',
   primary key (id)
);

alter table METEOROLOGICAL_FACTORS comment '气象要素表';-->

    <resultMap id="BaseResultMap" type="com.mijiaokj.sys.domain.origin.MeteorologicalFactors">
        <result column="land_id" jdbcType="BIGINT" property="landId" />
        <result column="temperature" jdbcType="VARCHAR" property="temperature" />
        <result column="illumination_time" jdbcType="VARCHAR" property="illuminationTime" />
        <result column="relative_humidity" jdbcType="VARCHAR" property="relativeHumidity" />
        <result column="wind_speed" jdbcType="VARCHAR" property="windSpeed" />
        <result column="photosynthetic_intensity" jdbcType="VARCHAR" property="photosyntheticIntensity" />
        <result column="respiration_intensity" jdbcType="VARCHAR" property="respirationIntensity" />
        <result column="precipitation" jdbcType="VARCHAR" property="precipitation" />
    </resultMap>

    <sql id="BaseColumns">
        land_id, temperature, illumination_time, relative_humidity, wind_speed, photosynthetic_intensity, respiration_intensity, precipitation
    </sql>

    <sql id="BaseProperties">
        #{landId},
        #{temperature},
        #{illuminationTime},
        #{relativeHumidity},
        #{windSpeed},
        #{photosyntheticIntensity},
        #{respirationIntensity},
        #{precipitation}
    </sql>

    <select id="getById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select *
        from meteorological_factors
        where id = #{id,jdbcType=BIGINT}
        and is_delete = 0
    </select>

    <select id="queryMeteorologicalFactorsByLandId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select *
        from meteorological_factors
        where is_delete = 0 and land_id = #{landId,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.mijiaokj.sys.domain.origin.MeteorologicalFactors" useGeneratedKeys="true" keyProperty="id">
        insert into meteorological_factors (
        <include refid="BaseColumns" /> ,
        <include refid="Common.CommonColumns" />
        ) values (
        <include refid="BaseProperties" /> ,
        <include refid="Common.CommonProperties" />
        )
    </insert>

    <!--<update id="update" parameterType="com.mijiaokj.sys.domain.origin.MeteorologicalFactors">
        update meteorological_factors set
        land_id = #{landId,jdbcType=BIGINT},
        over_elements = #{overElements,jdbcType=VARCHAR},
        missing_elements = #{missingElements,jdbcType=VARCHAR},
        ph  = #{ph,jdbcType=VARCHAR},
        testing_id = #{testingId,jdbcType=BIGINT},
        gmt_testing = #{gmtTesting,jdbcType=TIMESTAMP},
        testing_file = #{testingFile,jdbcType=VARCHAR},
        land_img = #{landImg,jdbcType=VARCHAR}
        <include refid="Common.CommonUpdate" />
        where id = #{id,jdbcType=BIGINT}
    </update>-->

    <update id="delete" parameterType="java.lang.Long">
        update meteorological_factors
        set is_delete = 1
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectPageByMap" resultMap="BaseResultMap">
        select t1.*
        from meteorological_factors t1 ,(
        select id from meteorological_factors
        WHERE is_delete=0
        order by gmt_modified desc
        limit #{startRow,jdbcType=INTEGER} ,
        #{pageSize,jdbcType=INTEGER}
        )t2
        WHERE t1.id=t2.id
    </select>

    <select id="pageCountByMap" resultType="java.lang.Integer">
        select count(1) as count
        from meteorological_factors WHERE is_delete=0
    </select>

</mapper>